<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Skanda Vaidyanath</title>
    <link>https://skandavaidyanath.github.io/</link>
      <atom:link href="https://skandavaidyanath.github.io/index.xml" rel="self" type="application/rss+xml" />
    <description>Skanda Vaidyanath</description>
    <generator>Source Themes Academic (https://sourcethemes.com/academic/)</generator><language>en-us</language><lastBuildDate>Mon, 04 Nov 2019 03:10:24 +0530</lastBuildDate>
    <image>
      <url>https://skandavaidyanath.github.io/img/icon-192.png</url>
      <title>Skanda Vaidyanath</title>
      <link>https://skandavaidyanath.github.io/</link>
    </image>
    
    <item>
      <title>Introduction: Why RL?</title>
      <link>https://skandavaidyanath.github.io/courses/rl-course/post1/</link>
      <pubDate>Sun, 05 May 2019 00:00:00 +0100</pubDate>
      <guid>https://skandavaidyanath.github.io/courses/rl-course/post1/</guid>
      <description>

&lt;p&gt;Hi and welcome to the first post of this RL course. In this post, my aim will be to introduce the idea of RL to you and talk about the problems it solves and why its important.&lt;/p&gt;

&lt;p&gt;Reinforcement learning is like that little-known cousin of supervised learning and unsupervised learning. Or at least it was for the longest time. In recent times though, its been gaining a lot of attention, mainly due to &lt;a href=&#34;https://deepmind.com/blog/article/alphazero-shedding-new-light-grand-games-chess-shogi-and-go&#34; target=&#34;_blank&#34;&gt;DeepMind&amp;rsquo;s AlphaZero&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;But having said that, people still don&amp;rsquo;t quite know what RL is yet and don&amp;rsquo;t know how and when to use it. So as a part of this introductory blog, I will try to answer three questions that people often ask me about RL&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;What is Reinforcement Learning?&lt;/li&gt;
&lt;li&gt;How is it different from Supervised learning or Unsupervised learning?&lt;/li&gt;
&lt;li&gt;What problems can it solve?&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;And lets begin!&lt;/p&gt;

&lt;h3 id=&#34;what-is-reinforcement-learning&#34;&gt;What is Reinforcement Learning?&lt;/h3&gt;

&lt;p&gt;Reinforcement learning is a sub-part of Machine Learning (ML). The most general way to divide ML into three parts would be as Supervised learning (SL), Unsupervised learning (USL) and Reinforcement Learning. But most people only talk about SL and USL when they talk about ML.
So my first job is to explain why the third paradigm is important and how it is different from the first two.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Reinforcement learning is an area of machine learning concerned with how software agents ought to take actions in an environment in order to maximize some notion of cumulative reward.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The above definition is taken from Wikipedia.
The definition speaks about &amp;ldquo;agents&amp;rdquo; taking &amp;ldquo;actions&amp;rdquo; in &amp;ldquo;environments&amp;rdquo; to maximize &amp;ldquo;rewards&amp;rdquo;. But what does all this mean? Lets break it down, but before that, here is a simpler definition.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Reinforcement learning is simply learning by trial and error.&lt;/p&gt;
&lt;/blockquote&gt;




  











&lt;figure&gt;


  &lt;a data-fancybox=&#34;&#34; href=&#34;https://skandavaidyanath.github.io/img/post1_rl.png&#34; data-caption=&#34;The RL Setup. Source: Google Images&#34;&gt;
&lt;img src=&#34;https://skandavaidyanath.github.io/img/post1_rl.png&#34; alt=&#34;&#34; &gt;&lt;/a&gt;


  
  
  &lt;figcaption&gt;
    The RL Setup. Source: Google Images
  &lt;/figcaption&gt;


&lt;/figure&gt;


&lt;p&gt;Think about how you started learning to ride a bike. You probably tried a bunch of different things and continued doing more of what worked (&amp;ldquo;worked&amp;rdquo; in this context probably means &amp;ldquo;did not fall and moved in the intended direction&amp;rdquo;) and less of what didn&amp;rsquo;t. Nobody gave you clear instructions on what to do at each step, you just tried things and they worked. In fact, humans gain several skills in the same fashion. Imagine you&amp;rsquo;re playing a brand new video game without reading the instructions or picking up a new sport. Humans learn several tasks by trial and error and that&amp;rsquo;s exactly what we&amp;rsquo;re trying to emulate with RL. Trying to get as close as possible to the way humans learn.&lt;/p&gt;

&lt;p&gt;With that intuition, lets take a jab at the Wikipedia definition again. The &amp;ldquo;agent&amp;rdquo; in our biker example is the person trying to learn to ride a bike. The &amp;ldquo;environment&amp;rdquo; is everything that may affect the person riding the bike &amp;ndash; so this could be the road, the traffic, the weather, etc. As for &amp;ldquo;actions&amp;rdquo;, these are the different decisions the agent can make &amp;ndash; for example, they could be &amp;ldquo;turn left&amp;rdquo;, &amp;ldquo;turn right&amp;rdquo;, etc. The agent must decide based on the state of the environment, what the right action to play is at a given point. And finally &amp;ldquo;rewards&amp;rdquo; is some sort of feedback we get for the series of actions we just took. So we would get a positive reward if we reached our destination and negative if we fell down for example. All these terms will be dealt with more formally in the next post. For now, just make sure you get the intuition.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Bottomline: RL is just learning by trial and error to pick the right actions depending on the state of the environment.&lt;/strong&gt;&lt;/p&gt;

&lt;h3 id=&#34;how-is-it-different-from-supervised-learning-or-unsupervised-learning&#34;&gt;How is it different from Supervised learning or Unsupervised learning?&lt;/h3&gt;

&lt;p&gt;This is the question I get asked the most about RL. The difference between RL and USL is quite clear. In USL, there is absolutely no form of feedback or supervision whereas in RL we do get some sort of feedback in the form of a reward signal.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;So Reinforcement Learning is not Unsupervised learning.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The more pertinent question is &amp;ndash; how is it different from supervised learning? Is RL just SL with class labels given in a different manner?&lt;/p&gt;

&lt;p&gt;Lets look at another very common example. We want to teach our computer to play Tic-Tac-Toe. Our data is in the form of several games that have been played from start to finish. If we consider this as training data for our SL model, the only labels we could possibly decipher from these games would be the final outcome &amp;ndash; the winner of the game or if it was a draw. If we are able to somehow encode the game and train a classifier on the data, this SL model would be able to predict the outcome of a game (which is not very useful) but not &lt;em&gt;how to play the game&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;If we wanted to train a SL model to learn &lt;em&gt;how to play the game&lt;/em&gt;, we would need training data in the form of &lt;em&gt;the best move to play at every board position&lt;/em&gt;. But alas, we do not have such information and this is the case in most problems (think about riding a cycle or playing chess or a video game).&lt;/p&gt;

&lt;p&gt;So what do we do now? For now, take it for granted that RL can solve the problem with the same data and teach a computer how to play Tic-Tac-Toe. We&amp;rsquo;ll talk about how it does it soon enough.&lt;/p&gt;

&lt;p&gt;But since our aim was just to show that RL and SL are not the same, we are done here. SL requires &amp;ldquo;step-wise&amp;rdquo; (this is not a technical term and hence is in quotes, but you get the idea) labels to learn &lt;em&gt;how to do a task&lt;/em&gt;. It requires &amp;ldquo;strong&amp;rdquo; supervision. RL can do the same thing with some sort of &amp;ldquo;weak&amp;rdquo;/&amp;ldquo;distant&amp;rdquo;/&amp;ldquo;semi&amp;rdquo;-supervision.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;So Reinforcement Learning is not Supervised learning either.&lt;/strong&gt;&lt;/p&gt;

&lt;h3 id=&#34;what-problems-can-it-solve&#34;&gt;What problems can it solve?&lt;/h3&gt;

&lt;p&gt;All this sounds great but what problems can RL solve? So far we&amp;rsquo;ve spoken about riding bikes and playing chess and video games but are there any significant real-world problems RL can solve?&lt;/p&gt;

&lt;p&gt;As it turns out there are several. RL is also commonly referred to as &lt;strong&gt;Sequential Decision Making&lt;/strong&gt; or &lt;strong&gt;Decision Making under Uncertainty&lt;/strong&gt;. When we put it this way, we can think of several applications for RL in the real-world. I&amp;rsquo;ll talk about a few here.&lt;/p&gt;

&lt;p&gt;


  











&lt;figure&gt;


  &lt;a data-fancybox=&#34;&#34; href=&#34;https://skandavaidyanath.github.io/img/post1_pong.jpg&#34; data-caption=&#34;Atari Games: Pong. Source: Google Images&#34;&gt;
&lt;img src=&#34;https://skandavaidyanath.github.io/img/post1_pong.jpg&#34; alt=&#34;&#34; &gt;&lt;/a&gt;


  
  
  &lt;figcaption&gt;
    Atari Games: Pong. Source: Google Images
  &lt;/figcaption&gt;


&lt;/figure&gt;




  











&lt;figure&gt;


  &lt;a data-fancybox=&#34;&#34; href=&#34;https://skandavaidyanath.github.io/img/post1_alphazero.jpg&#34; data-caption=&#34;AlphaZero: Chess. Source: Google Images&#34;&gt;
&lt;img src=&#34;https://skandavaidyanath.github.io/img/post1_alphazero.jpg&#34; alt=&#34;&#34; &gt;&lt;/a&gt;


  
  
  &lt;figcaption&gt;
    AlphaZero: Chess. Source: Google Images
  &lt;/figcaption&gt;


&lt;/figure&gt;
&lt;/p&gt;

&lt;p&gt;RL gained massive popularity because of its success at playing Go and Chess and &lt;a href=&#34;https://arxiv.org/abs/1312.5602&#34; target=&#34;_blank&#34;&gt;Atari Games&lt;/a&gt; as well but there are several other applications of RL.&lt;/p&gt;

&lt;p&gt;RL is extremely versatile and can be used along with several other common ML areas like Computer Vision (CV) and Natural Language Processing (NLP).&lt;/p&gt;

&lt;p&gt;The best example of using RL with CV is probably self-driving cars. With NLP, it can be used in dialogue systems (I recommend you Google how both of this is done to get a better idea). Another massive application area is in robotics and control. It can be used to train multi-agent systems, for example, a swarm of drones communicating with each other. One of my favourite applications of RL is personalized learning where an RL agent can design an optimal course for a student with the right number of tests/assignments administered at the right time to encourage maximum learning. There is similar work being done on personalized healthcare as well.&lt;/p&gt;




  











&lt;figure&gt;


  &lt;a data-fancybox=&#34;&#34; href=&#34;https://skandavaidyanath.github.io/img/post1_robotics.jpg&#34; data-caption=&#34;Robotics. Source: Google Images&#34;&gt;
&lt;img src=&#34;https://skandavaidyanath.github.io/img/post1_robotics.jpg&#34; alt=&#34;&#34; &gt;&lt;/a&gt;


  
  
  &lt;figcaption&gt;
    Robotics. Source: Google Images
  &lt;/figcaption&gt;


&lt;/figure&gt;


&lt;p&gt;And so there are a ton of different applications you can make using RL. There are also other slightly different uses, for example, RL can be used to &lt;a href=&#34;post/bridging-the-gaps-with-RL/index.md&#34; target=&#34;_blank&#34;&gt;overcome non-differentiable steps in deep learning&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;And with that, we&amp;rsquo;ve answered all the questions that we set out to! We get into a lot more details in the &lt;a href=&#34;https://skandavaidyanath.github.io/courses/rl-course/post2/&#34; target=&#34;_blank&#34;&gt;next post&lt;/a&gt; so make sure you take a look at that as well.&lt;/p&gt;

&lt;p&gt;Feel free to let me know if you have any feedback!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>RL Fundamentals</title>
      <link>https://skandavaidyanath.github.io/courses/rl-course/post2/</link>
      <pubDate>Sun, 05 May 2019 00:00:00 +0100</pubDate>
      <guid>https://skandavaidyanath.github.io/courses/rl-course/post2/</guid>
      <description>

&lt;p&gt;In this post, we&amp;rsquo;ll try to get into the real nitty-gritties of RL and build on the intuition that we gained from the &lt;a href=&#34;https://skandavaidyanath.github.io/courses/rl-course/post1/&#34; target=&#34;_blank&#34;&gt;last article&lt;/a&gt;. So we&amp;rsquo;ll bring in some mathematical foundation and then introduce some RL parlance that we will use for the rest of this course. I strongly recommend that you keep referring back to this post in case you need a refresher on RL terms and symbols. I&amp;rsquo;ll stick to the standard notation from the RL book.&lt;/p&gt;

&lt;p&gt;Before we begin with the mathematical foundations of RL, I&amp;rsquo;d like to point out some issues with RL and what kinds of problems we need to account for if we were to come up with RL algorithms of our own. Once again, I&amp;rsquo;m going to move on to a new example so lets take Chess this time.
So we want to teach our agent (recall what this means from the previous post) how to play the game of chess. Lets assume we have some sort of reward function in place where we get some small positive rewards for capturing a piece and small negative rewards for losing a piece depending on the importance of the piece (so losing a queen would lead to a negative reward of larger magnitude than losing a pawn). We also have some large positive final reward for winning the game and a large positive negative reward for losing. If you&amp;rsquo;re wondering whether just ths large final reward is a sufficient reward function on its own, you&amp;rsquo;re probably right and it probably is, but lets stick to this for the sake of illustration.
Now assume we have an RL algorithm that can look at several games of Chess and the rewards and learn to play Chess on its own. What would this algorithm need to account for? We spoke about trial and error being the basis of any RL algorithm in the previous post that is exactly what our algorithm would do as well. It starts playing random moves and when it plays a good move (positive reward), it remembers to play that move the next time it is in a similar situation. This seems fine on the face of it, but there is an issue. Maybe the algorithm found a good move to play at a given position, &lt;em&gt;but what if there was a better move?&lt;/em&gt;
We need some way for the algorithm to account for the possibility of there being a better move than the one it has found already. So when we train our agent we need to make sure the agent doesn&amp;rsquo;t greedily play the best move it knows all the time but also plays some different moves, hoping that they may be better than the one it already found. This is called the &lt;em&gt;exploration-exploitation tradeoff&lt;/em&gt; in RL. Usually, RL algorithms tend to explore i.e. play many random moves initially and when the agent is more sure about the best moves under different circumstances, it starts exploiting that knowledge.&lt;/p&gt;

&lt;p&gt;Lets move on to the next issue that our RL algorithm will have to account for. Lets say our RL algorithm is learning from a game of Chess again where the player sacrifices the queen but goes on to win the game. The RL agent immediately registers a negative reward for the loss of the queen but the large positive reward for winning the game only comes much later. But it is entirely possible that the very queen sacrifice that the RL agent probably classified as a bad move, was the reason for the player winning the game. How do we account for this in our algorithm? This is the concept of &lt;em&gt;delayed rewards&lt;/em&gt; and we will deal with a simple yet elegant solution for this as well as we go through this post.&lt;/p&gt;

&lt;p&gt;With that background, lets talk about how RL problems are modeled and get into some math.&lt;/p&gt;

&lt;h2 id=&#34;markov-decision-processes&#34;&gt;Markov Decision Processes&lt;/h2&gt;

&lt;p&gt;


  











&lt;figure&gt;


  &lt;a data-fancybox=&#34;&#34; href=&#34;https://skandavaidyanath.github.io/img/post2_mdp_example.jpg&#34; data-caption=&#34;A Markov Decision Process. Source: here&#34;&gt;
&lt;img src=&#34;https://skandavaidyanath.github.io/img/post2_mdp_example.jpg&#34; alt=&#34;&#34; &gt;&lt;/a&gt;


  
  
  &lt;figcaption&gt;
    A Markov Decision Process. Source: &lt;a href=&#34;https://randomant.net/reinforcement-learning-concepts/&#34; target=&#34;_blank&#34;&gt;here&lt;/a&gt;
  &lt;/figcaption&gt;


&lt;/figure&gt;




  











&lt;figure&gt;


  &lt;a data-fancybox=&#34;&#34; href=&#34;https://skandavaidyanath.github.io/img/post2_rl_with_not.jpg&#34; data-caption=&#34;The RL Framework (with some additional details). Source: Google Images&#34;&gt;
&lt;img src=&#34;https://skandavaidyanath.github.io/img/post2_rl_with_not.jpg&#34; alt=&#34;&#34; &gt;&lt;/a&gt;


  
  
  &lt;figcaption&gt;
    The RL Framework (with some additional details). Source: Google Images
  &lt;/figcaption&gt;


&lt;/figure&gt;
&lt;/p&gt;

&lt;p&gt;Almost all RL problems can be modeled as a Markov Decision Process (MDP). So what is an MDP? An MDP can be defined as a five tuple $$\langle \mathcal{S}, \mathcal{A}, \mathcal{P}, \mathcal{R}, \gamma \rangle$$
Lets take a closer look at what all of this means.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;em&gt;S&lt;/em&gt; : This is the set of states of the MDP. In an RL setting, this would correspond to different settings of the environment. In the previous post, we spoke about how RL was all about choosing the right actions at the right times i.e. depending on the state of the environment. This is the state we were talking about. A state in chess or tic-tac-toe cpuld be the board positions or while riding a bike could be some combination of the pertinent variables like the angle of the bike with thr ground, the wind speed, etc. The S variable represents the set of all unique states in the MDP.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;A&lt;/em&gt; : This is the set of all actions of the MDP. We already spoke about actions briefly. Actions describe the possible moves in a game of Chess or tic-tac-toe or different arrow keys or buttons in a video game, etc. It represents the different options the agent has and can play at a given point in time. A represents the set of all unique actions available to the agent.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Before we move on to the other symbols, lets get some things clear. Here is another more compilacted MDP for your reference.&lt;/p&gt;




  











&lt;figure&gt;


  &lt;a data-fancybox=&#34;&#34; href=&#34;https://skandavaidyanath.github.io/img/post2_mdp.png&#34; data-caption=&#34;Another MDP. Source: Google Images&#34;&gt;
&lt;img src=&#34;https://skandavaidyanath.github.io/img/post2_mdp.png&#34; alt=&#34;&#34; &gt;&lt;/a&gt;


  
  
  &lt;figcaption&gt;
    Another MDP. Source: Google Images
  &lt;/figcaption&gt;


&lt;/figure&gt;


&lt;p&gt;Some of the states of the MDP are designated as start states or initial states and end states or terminal states. An &lt;em&gt;episode&lt;/em&gt; in RL is a sequence of state-action pairs that take the agent from a start state to a terminal state. So the agent starts from one of the intial states, plays an action, goes to the next state and so on until it hits a terminal state and the episode ends.
Now lets take a look at this MDP in the diagram above. Assume &lt;em&gt;S&lt;/em&gt;&lt;sub&gt;0&lt;/sub&gt; is your initial state. Notice that &lt;em&gt;a&lt;/em&gt;&lt;sub&gt;0&lt;/sub&gt; from &lt;em&gt;S&lt;/em&gt;&lt;sub&gt;0&lt;/sub&gt; has two arrows, one going into &lt;em&gt;S&lt;/em&gt;&lt;sub&gt;0&lt;/sub&gt; again and another going into &lt;em&gt;S&lt;/em&gt;&lt;sub&gt;2&lt;/sub&gt;. The numbers on the arrows indicate 0.5 and 0.5 respectively. This means that if an agent plays the action &lt;em&gt;a&lt;/em&gt;&lt;sub&gt;0&lt;/sub&gt; from &lt;em&gt;S&lt;/em&gt;&lt;sub&gt;0&lt;/sub&gt;, it has a 0.5 probability that it ends up back in &lt;em&gt;S&lt;/em&gt;&lt;sub&gt;0&lt;/sub&gt; and a 0.5 probability that it ends up in &lt;em&gt;S&lt;/em&gt;&lt;sub&gt;2&lt;/sub&gt;. And similarly we have arrows going all over the diagram. Also notice the wiggly arrows &amp;ndash; they&amp;rsquo;re rewards.
Notationally, we index the sequence of state-action pairs in an episode with a time variable &lt;em&gt;t&lt;/em&gt; so we say an agent plays action &lt;em&gt;a&lt;/em&gt;&lt;sub&gt;t&lt;/sub&gt; from state &lt;em&gt;s&lt;/em&gt;&lt;sub&gt;t&lt;/sub&gt; abnd gets reward &lt;em&gt;r&lt;/em&gt;&lt;sub&gt;t+1&lt;/sub&gt; for doing so (the reward can be 0). Here, &lt;em&gt;t&lt;/em&gt; starts from 0 and we represent the terminal time-step as &lt;em&gt;T&lt;/em&gt;.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;em&gt;P&lt;/em&gt; : Now P is the probability function defined as &lt;em&gt;P&lt;/em&gt;(s&lt;sup&gt;&amp;lsquo;&lt;/sup&gt;| s, a) which is read as the probability of moving to &amp;ldquo;state s&amp;rsquo;&amp;rdquo; from &amp;ldquo;state s&amp;rdquo; if the agent plays &amp;ldquo;action a&amp;rdquo;. So for example, &lt;em&gt;P&lt;/em&gt;(&lt;em&gt;S&lt;/em&gt;&lt;sub&gt;2&lt;/sub&gt;|&lt;em&gt;S&lt;/em&gt;&lt;sub&gt;0&lt;/sub&gt;,&lt;em&gt;a&lt;/em&gt;&lt;sub&gt;0&lt;/sub&gt;) = 0.5&lt;/li&gt;
&lt;li&gt;&lt;em&gt;R&lt;/em&gt; : This is the reward function and is defined as &lt;em&gt;R&lt;/em&gt;(s&lt;sup&gt;&amp;lsquo;&lt;/sup&gt;| s, a) which is the reward the agent gets for moving to &amp;ldquo;state s&amp;rsquo;&amp;rdquo; from &amp;ldquo;state s&amp;rdquo; if the agent plays &amp;ldquo;action a&amp;rdquo;. So for example, &lt;em&gt;R&lt;/em&gt;(&lt;em&gt;S&lt;/em&gt;&lt;sub&gt;0&lt;/sub&gt;|&lt;em&gt;S&lt;/em&gt;&lt;sub&gt;1&lt;/sub&gt;,&lt;em&gt;a&lt;/em&gt;&lt;sub&gt;0&lt;/sub&gt;) = +5&lt;/li&gt;
&lt;li&gt;$\gamma$ : We spoke about the concept of delayed rewards earlier in the post and we wanted a way to accound for delayed effects of actions. This is where $\gamma$ helps. We define the &lt;em&gt;returns&lt;/em&gt; of an action from a given state as the sum of the &lt;em&gt;discounted rewards&lt;/em&gt; we receive from that state for playing that action. If we started from the state &lt;em&gt;s&lt;/em&gt;&lt;sub&gt;0&lt;/sub&gt;, the returns would be defined as &lt;em&gt;r&lt;/em&gt;&lt;sub&gt;1&lt;/sub&gt; + $\gamma$ &lt;em&gt;r&lt;/em&gt;&lt;sub&gt;2&lt;/sub&gt; + $\gamma$&lt;sup&gt;2&lt;/sup&gt; &lt;em&gt;r&lt;/em&gt;&lt;/sub&gt;3&lt;/sub&gt; + &amp;hellip; $\gamma$ &lt;sup&gt;&lt;em&gt;T-1&lt;/em&gt;&lt;/sup&gt; &lt;em&gt;r&lt;/em&gt;&lt;sub&gt;&lt;em&gt;T&lt;/em&gt;&lt;/sub&gt;. We use the word &amp;ldquo;discounted&amp;rdquo; because $\gamma$ is usually a number between 0 and 1 and with the increasing powers, we give more weight to the immediate rewards than the delayed rewards. Hence, $\gamma$ is also called the discounting factor. The symbol we use for returns from timestep &lt;em&gt;t&lt;/em&gt; is usually &lt;em&gt;G&lt;/em&gt;&lt;sub&gt;&lt;em&gt;t&lt;/em&gt;&lt;/sub&gt; although some people like using &lt;em&gt;R&lt;/em&gt; as well (&lt;em&gt;r&lt;/em&gt; for reward and &lt;em&gt;R&lt;/em&gt; for returns). We will stick to the former notation. Now going back to the queen sacrifice example, if we were to consider the returns in our algorithm instead of just the immediate reward, we will be able to account for the delayed positive effect and not just the immediate negative effect.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;And with that, we&amp;rsquo;ve covered MDPs and how to model RL problems. But with that definition, we still haven&amp;rsquo;t accounted for the exploration-exploitation tradeoff. So in the &lt;a href=&#34;https://skandavaidyanath.github.io/courses/rl-course/post2/&#34; target=&#34;_blank&#34;&gt;next post&lt;/a&gt;, we&amp;rsquo;ll introduce a few more symbols and definitions and get cracking with our very first RL algorithm!&lt;/p&gt;

&lt;p&gt;Once again, let me know if you have any feedback or suggestions.&lt;/p&gt;

&lt;h3 id=&#34;references&#34;&gt;References&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;https://lilianweng.github.io/lil-log/2018/02/19/a-long-peek-into-reinforcement-learning.html&#34; target=&#34;_blank&#34;&gt;A (Long) Peek into Reinforcement Learning by Lilian Weng&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
</description>
    </item>
    
    <item>
      <title>The Bellman Equation and Dynamic Programming</title>
      <link>https://skandavaidyanath.github.io/courses/rl-course/post3/</link>
      <pubDate>Sun, 05 May 2019 00:00:00 +0100</pubDate>
      <guid>https://skandavaidyanath.github.io/courses/rl-course/post3/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Works Like a Charm</title>
      <link>https://skandavaidyanath.github.io/post/works-like-a-charm/</link>
      <pubDate>Mon, 04 Nov 2019 03:10:24 +0530</pubDate>
      <guid>https://skandavaidyanath.github.io/post/works-like-a-charm/</guid>
      <description>&lt;p&gt;Coming soon&amp;hellip;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Bridging the Gaps With Reinforcement Learning</title>
      <link>https://skandavaidyanath.github.io/post/bridging-the-gaps-with-rl/</link>
      <pubDate>Mon, 04 Nov 2019 03:10:09 +0530</pubDate>
      <guid>https://skandavaidyanath.github.io/post/bridging-the-gaps-with-rl/</guid>
      <description>

&lt;p&gt;In this post, I will be talking about a unique way to use reinforcement learning (RL) in deep learning applications. I definitely recommend burshing up some deep learning fundamentals and if possible, some policy gradient fundamentals as well before you get started with this post.&lt;/p&gt;

&lt;p&gt;Traditionally, RL is used to solve sequential decision making problems or decision making problems under uncertainty. There are several applications in the fields of video games and robotics where the task at hand can be very easily seen as an RL problem and can be modeled appropriately as well. But RL as a technique is quite versatile and can be used in several other domains to train neural networks that are traditionally trained in a supervised fashion. We&amp;rsquo;ll talk about one very important such application in this post. Along the way, I&amp;rsquo;ll also try to convince you that this isn&amp;rsquo;t really a different way to use RL but rather just a different way to look at the traditional RL problem.&lt;/p&gt;

&lt;h2 id=&#34;non-differentiable-steps-in-deep-learning-the-gaps&#34;&gt;Non-differentiable steps in deep learning: The Gaps&lt;/h2&gt;

&lt;p&gt;Sometimes when we&amp;rsquo;re coming up with neural network architectures, we stumble up on non-differentiable operations as a part of our network. Now this is a problem as we can&amp;rsquo;t backpropagate losses through such operation and hence lets call these &amp;ldquo;gaps&amp;rdquo;. So what are some common gaps we come across in neural networks?&lt;/p&gt;

&lt;p&gt;Before we start talking about some &amp;ldquo;real gaps&amp;rdquo;, its worth mentioning that the famous ReLU function is a non-differentiable function but we overcome that gap by setting the derivative at 0 to either 1 or 0 and get away with it.&lt;/p&gt;

&lt;p&gt;Now lets take a better example &amp;ndash; variational autoencoders (VAE). Without going into two many details, the VAE network outputs two vectors: a $\mu$ vector and a $\sigma$ vector and it involves a crucial sampling step where we sample from the distribution &lt;em&gt;N($\mu$, $\sigma$)&lt;/em&gt; as a part of the network. Now sampling is a gap as it is a non-differentiable step. So how do they get over this in the VAE case? They use a clever trick.
Instead of sampling from &lt;em&gt;N&lt;/em&gt;($\mu$, $\sigma$), they just rewrite this as $\mu$ + $\sigma$&lt;em&gt;N(0,1)&lt;/em&gt; where they sample from the standard normal function. This neat trick now makes the expression differentiable because we just need the $\mu$ and $\sigma$ quantities to be differentiable and we don&amp;rsquo;t care about the &lt;em&gt;N(0,1)&lt;/em&gt;. Remember that we only need to differentiate with respect to the parameters of our network (brush up some backpropagation basics if you&amp;rsquo;re confused here) and hence we need to differentiate wrt $\mu$ and $\sigma$. For more details about VAEs read &lt;a href=&#34;https://towardsdatascience.com/intuitively-understanding-variational-autoencoders-1bfe67eb5daf&#34; target=&#34;_blank&#34;&gt;this post&lt;/a&gt; or &lt;a href=&#34;https://towardsdatascience.com/understanding-variational-autoencoders-vaes-f70510919f73&#34; target=&#34;_blank&#34;&gt;this one&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;So as it turned out, that wasn&amp;rsquo;t a very good example either but we&amp;rsquo;re starting to understand what we mean by gaps now and how common they are. Some common examples of gaps in networks are sampling operations and the argmax operation. Read &lt;a href=&#34;https://www.reddit.com/r/MachineLearning/comments/4e2get/argmax_differentiable/&#34; target=&#34;_blank&#34;&gt;this thread&lt;/a&gt; to understand why max is a differentiable function (recall max pooling in CNNs) while argmax is not.
These are commonly used in natural language processing (NLP) applications, information retrieval (IR) applications and Computer Vision (CV) applications as well. For example, a sampling function could be used to select words from a sentence based on a probability distribution in an NLP application or an argmax function could be used to find the highest ranked document in an IR application. &lt;a href=&#34;https://jhui.github.io/2017/03/15/Soft-and-hard-attention/&#34; target=&#34;_blank&#34;&gt;Hard attention&lt;/a&gt; uses sampling techniques which involves non-differentiable computation.&lt;/p&gt;

&lt;p&gt;So its quite clear that these gaps are common in several deep learning architectures and sometimes, it could even be useful to introduce such a gap in the network intentionally to reap added benefits. The only question is, &lt;em&gt;how do we bridge these gaps?&lt;/em&gt;&lt;/p&gt;

&lt;h2 id=&#34;reinforcement-learning-and-policy-gradients-the-bridge&#34;&gt;Reinforcement Learning and Policy Gradients: The Bridge&lt;/h2&gt;

&lt;p&gt;Policy gradients are a class of algorithms in RL. There are several policy gradient algorithms and &lt;a href=&#34;https://lilianweng.github.io/lil-log/2018/04/08/policy-gradient-algorithms.html&#34; target=&#34;_blank&#34;&gt;this&lt;/a&gt; is a great blog that lists out almost all of them. But without going into too many details, these algorithms work in the policy space by updating the parameters of the policy we&amp;rsquo;re trying to learn. That means we don&amp;rsquo;t necessarily need to find the value function of different states but we can directly alter our policy until we&amp;rsquo;re happy.
The most common policy gradient (PG) algorithm is the REINFORCE which is a Monte Carlo algorithm. This means we run an entire episode and make changes to our policy only at the end of each episode and not at every step. We make these changes based on the returns that we received by taking a given action from a given state in the episode. I skip the derivation of the policy gradient here but it can be found in the link above. The final result is in the image below.&lt;/p&gt;














&lt;figure&gt;


  &lt;a data-fancybox=&#34;&#34; href=&#34;pg.PNG&#34; data-caption=&#34;The Policy Gradient. Source: here&#34;&gt;
&lt;img src=&#34;pg.PNG&#34; alt=&#34;&#34; &gt;&lt;/a&gt;


  
  
  &lt;figcaption&gt;
    The Policy Gradient. Source: &lt;a href=&#34;https://medium.com/@thechrisyoon/deriving-policy-gradients-and-implementing-reinforce-f887949bd63&#34; target=&#34;_blank&#34;&gt;here&lt;/a&gt;
  &lt;/figcaption&gt;


&lt;/figure&gt;


&lt;p&gt;The key idea here is that in policy gradient methods, we are allowed to &lt;em&gt;sample different actions from a given state and wait till the end of an episode before we make updates to our network&lt;/em&gt;. So if we have a sampling operation as a part of our network, we can introduce a policy gradient and think of it as sampling actions in a given state in an RL framework. A similar procedure can also be followed if we had argmax in place of the sampling operation.&lt;/p&gt;

&lt;p&gt;Consider a neural network now with a gap. The images below are taken from &lt;a href=&#34;http://karpathy.github.io/2016/05/31/rl/&#34; target=&#34;_blank&#34;&gt;this blog&lt;/a&gt; on Policy Gradients written by Andrej Karpathy.&lt;/p&gt;

&lt;p&gt;












&lt;figure&gt;


  &lt;a data-fancybox=&#34;&#34; href=&#34;karpathy1.PNG&#34; data-caption=&#34;Gaps in a neural network. Source: Karpathy&amp;rsquo;s blog&#34;&gt;
&lt;img src=&#34;karpathy1.PNG&#34; alt=&#34;&#34; &gt;&lt;/a&gt;


  
  
  &lt;figcaption&gt;
    Gaps in a neural network. Source: Karpathy&amp;rsquo;s &lt;a href=&#34;http://karpathy.github.io/2016/05/31/rl/&#34; target=&#34;_blank&#34;&gt;blog&lt;/a&gt;
  &lt;/figcaption&gt;


&lt;/figure&gt;














&lt;figure&gt;


  &lt;a data-fancybox=&#34;&#34; href=&#34;karpathy2.PNG&#34; data-caption=&#34;The sampling operation. Source: Karpathy&amp;rsquo;s blog&#34;&gt;
&lt;img src=&#34;karpathy2.PNG&#34; alt=&#34;&#34; &gt;&lt;/a&gt;


  
  
  &lt;figcaption&gt;
    The sampling operation. Source: Karpathy&amp;rsquo;s &lt;a href=&#34;http://karpathy.github.io/2016/05/31/rl/&#34; target=&#34;_blank&#34;&gt;blog&lt;/a&gt;
  &lt;/figcaption&gt;


&lt;/figure&gt;
&lt;/p&gt;

&lt;p&gt;So now we can train the blue arrows i.e. the differentiable path as usual. But to train the red arrows, we need to introduce a policy gradient and as we sample, we ensure with the help of the policy gradient that we encourage samples that led to a lower loss. The updates to the red arrows happen independently than those of the blue arrows.
Note that in the diagrams above, there isn&amp;rsquo;t really a gap per-say because the blue arrows go all the way from start to finish. So there is a differentiable path and a non-differentiable path. A true gap would mean there would be no completely differentiable path at all. In this case, we need to make sure that the loss functions on either side of the gap are &amp;ldquo;in sync&amp;rdquo; and are being optimized in such a way that it facilitates joint training and achieves a common goal.&lt;/p&gt;

&lt;p&gt;We can still look at this entire setup as a traditional RL problem if we think of the inputs to the neural network as the state and the sampling process as sampling different actions from that given state. Now what is the reward function? This depends on what comes after the gap and could be an output from the rest of the network or it could be a completely independent reward function that you came up with as well. So at the end of the day, it is still the same MDP with the traditional setup but just used in a very different way.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Undergraduate Thesis - MPII</title>
      <link>https://skandavaidyanath.github.io/project/mpii/</link>
      <pubDate>Fri, 01 Nov 2019 04:46:38 +0530</pubDate>
      <guid>https://skandavaidyanath.github.io/project/mpii/</guid>
      <description>&lt;p&gt;This project is for my undergraduate thesis at the Max Planck Institute for Informatics under &lt;a href=&#34;https://andrewyates.net/&#34; target=&#34;_blank&#34;&gt;Dr. Andrew Yates&lt;/a&gt; and &lt;a href=&#34;https://paramitamirza.com/&#34; target=&#34;_blank&#34;&gt;Dr. Paramita Mirza&lt;/a&gt; and is currently in progress.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Software Bug Prediction</title>
      <link>https://skandavaidyanath.github.io/project/bug-prediction/</link>
      <pubDate>Tue, 01 Oct 2019 00:00:00 +0000</pubDate>
      <guid>https://skandavaidyanath.github.io/project/bug-prediction/</guid>
      <description>&lt;p&gt;This project is currently in progress and a research paper is in preparation. I will attach the code, the dataset and the paper once it has been published. This project was done under the guidance of &lt;a href=&#34;https://www.bits-pilani.ac.in/hyderabad/bhanumurthy/Profile&#34; target=&#34;_blank&#34;&gt;Prof. N. L. Bhanu Murthy&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>The Human-Swarm Project</title>
      <link>https://skandavaidyanath.github.io/talk/usc-ict/</link>
      <pubDate>Sun, 21 Jul 2019 00:00:00 +0000</pubDate>
      <guid>https://skandavaidyanath.github.io/talk/usc-ict/</guid>
      <description></description>
    </item>
    
    <item>
      <title>The Human Swarm Project</title>
      <link>https://skandavaidyanath.github.io/project/usc-ict/</link>
      <pubDate>Sat, 20 Jul 2019 00:00:00 +0000</pubDate>
      <guid>https://skandavaidyanath.github.io/project/usc-ict/</guid>
      <description>&lt;p&gt;This project is currently in progress and a research paper is in preparation. I will attach the code, the slides and the paper once it has been published. This project was done under the guidance of &lt;a href=&#34;http://people.ict.usc.edu/~kgeorgila/&#34; target=&#34;_blank&#34;&gt;Prof. Kallirroi Georgila&lt;/a&gt; and &lt;a href=&#34;http://ict.usc.edu/profile/david-traum/&#34; target=&#34;_blank&#34;&gt;Prof. David Traum&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Brain Decoding</title>
      <link>https://skandavaidyanath.github.io/project/brain-decoding/</link>
      <pubDate>Mon, 01 Jul 2019 00:00:00 +0000</pubDate>
      <guid>https://skandavaidyanath.github.io/project/brain-decoding/</guid>
      <description>&lt;p&gt;This &lt;a href=&#34;https://vamsi-aribandi.github.io/brain_decoding_1/&#34; target=&#34;_blank&#34;&gt;blog post&lt;/a&gt; has some interesting details. The code and a PDF report are available in links above. This project was done by &lt;a href=&#34;https://vamsi-aribandi.github.io/&#34; target=&#34;_blank&#34;&gt;Vamsi Aribandi&lt;/a&gt; and myself.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Community Question Answering for a distance-learning platform</title>
      <link>https://skandavaidyanath.github.io/project/cqa/</link>
      <pubDate>Thu, 01 Nov 2018 00:00:00 +0000</pubDate>
      <guid>https://skandavaidyanath.github.io/project/cqa/</guid>
      <description>&lt;p&gt;This project is currently in progress and a research paper is in preparation. I will attach the code, the dataset and the paper once it has been published. This project was done under the guidance of &lt;a href=&#34;https://www.bits-pilani.ac.in/hyderabad/bhanumurthy/Profile&#34; target=&#34;_blank&#34;&gt;Prof. N. L. Bhanu Murthy&lt;/a&gt; and &lt;a href=&#34;https://universe.bits-pilani.ac.in/hyderabad/arunamalapati/Profile&#34; target=&#34;_blank&#34;&gt;Prof. Aruna Malapati&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Personalized Learning from Job Descriptions</title>
      <link>https://skandavaidyanath.github.io/project/mitacs/</link>
      <pubDate>Sat, 20 Oct 2018 00:00:00 +0000</pubDate>
      <guid>https://skandavaidyanath.github.io/project/mitacs/</guid>
      <description>&lt;p&gt;Python notebook and slides for the project are linked above. This project was done as a part of the applications for the MITACS Globalink programme.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Search Engine On a Nuclear Corpus</title>
      <link>https://skandavaidyanath.github.io/project/igcar/</link>
      <pubDate>Tue, 31 Jul 2018 00:00:00 +0000</pubDate>
      <guid>https://skandavaidyanath.github.io/project/igcar/</guid>
      <description>&lt;p&gt;The code for this project cannot be made public. However, you can find a technical report and some slides in the links above. This project was done at the Indira Gandhi Centre for Atomic Research (IGCAR).&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Developing a Search Engine on a nuclear corpus and outlining a semantic based approach to Entity Profiling from raw text to build a Question Answering system</title>
      <link>https://skandavaidyanath.github.io/talk/igcar/</link>
      <pubDate>Wed, 25 Jul 2018 00:00:00 +0000</pubDate>
      <guid>https://skandavaidyanath.github.io/talk/igcar/</guid>
      <description></description>
    </item>
    
  </channel>
</rss>
